{"ast":null,"code":"// api.js\n/*import axios from \"axios\";\r\n\r\n// Adjust BASE_URL to your FastAPI backend (or keep mock if not ready yet)\r\nconst BASE_URL = \"http://localhost:8000\";\r\n\r\nconst API = axios.create({\r\n  baseURL: BASE_URL,\r\n});\r\n\r\nexport default API;\r\n*/\n// src/api.js\nimport axios from \"axios\";\nconst BASE_URL = \"http://localhost:8000\";\nconst API = axios.create({\n  baseURL: BASE_URL\n});\n\n// ðŸ”¹ Attach JWT token to every request if available\nAPI.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// ðŸ”¹ Login user and save token\nexport const loginUser = async credentials => {\n  const res = await API.post(\"/token\", credentials, {\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    }\n  });\n  const token = res.data.access_token;\n  if (token) {\n    localStorage.setItem(\"token\", token);\n  }\n  return res.data;\n};\n\n// ðŸ”¹ Fetch past reviews for logged-in user\nexport const fetchReviews = async () => {\n  const res = await API.get(\"/past-reviews\");\n  return res.data;\n};\n\n// ðŸ”¹ Generate a new review for given code\nexport const generateReview = async code => {\n  const res = await API.post(\"/generate-review\", {\n    code\n  });\n  return res.data;\n};\n\n// ðŸ”¹ Get predefined rejection reasons\nexport const getRejectionReasons = async () => {\n  const res = await API.get(\"/rejection-reasons\");\n  return res.data;\n};\n\n// ðŸ”¹ Submit feedback with multiple rejection reasons\nexport const submitFeedback = async (reviewId, feedback, rejectionReasons = [], customReason = null) => {\n  const res = await API.post(\"/submit-feedback\", {\n    review_id: reviewId,\n    feedback,\n    rejection_reasons: rejectionReasons,\n    custom_rejection_reason: customReason\n  });\n  return res.data;\n};\nexport default API;","map":{"version":3,"names":["axios","BASE_URL","API","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","loginUser","credentials","res","post","data","access_token","setItem","fetchReviews","get","generateReview","code","getRejectionReasons","submitFeedback","reviewId","feedback","rejectionReasons","customReason","review_id","rejection_reasons","custom_rejection_reason"],"sources":["D:/new folder aibott/New folder (2)/CODE-REVIEW-BOT/frontend/src/api.js"],"sourcesContent":["// api.js\r\n/*import axios from \"axios\";\r\n\r\n// Adjust BASE_URL to your FastAPI backend (or keep mock if not ready yet)\r\nconst BASE_URL = \"http://localhost:8000\";\r\n\r\nconst API = axios.create({\r\n  baseURL: BASE_URL,\r\n});\r\n\r\nexport default API;\r\n*/\r\n// src/api.js\r\nimport axios from \"axios\";\r\n\r\nconst BASE_URL = \"http://localhost:8000\";\r\n\r\nconst API = axios.create({\r\n  baseURL: BASE_URL,\r\n});\r\n\r\n// ðŸ”¹ Attach JWT token to every request if available\r\nAPI.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// ðŸ”¹ Login user and save token\r\nexport const loginUser = async (credentials) => {\r\n  const res = await API.post(\"/token\", credentials, {\r\n    headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n  });\r\n\r\n  const token = res.data.access_token;\r\n  if (token) {\r\n    localStorage.setItem(\"token\", token);\r\n  }\r\n  return res.data;\r\n};\r\n\r\n// ðŸ”¹ Fetch past reviews for logged-in user\r\nexport const fetchReviews = async () => {\r\n  const res = await API.get(\"/past-reviews\");\r\n  return res.data;\r\n};\r\n\r\n// ðŸ”¹ Generate a new review for given code\r\nexport const generateReview = async (code) => {\r\n  const res = await API.post(\"/generate-review\", { code });\r\n  return res.data;\r\n};\r\n\r\n// ðŸ”¹ Get predefined rejection reasons\r\nexport const getRejectionReasons = async () => {\r\n  const res = await API.get(\"/rejection-reasons\");\r\n  return res.data;\r\n};\r\n\r\n// ðŸ”¹ Submit feedback with multiple rejection reasons\r\nexport const submitFeedback = async (reviewId, feedback, rejectionReasons = [], customReason = null) => {\r\n  const res = await API.post(\"/submit-feedback\", {\r\n    review_id: reviewId,\r\n    feedback,\r\n    rejection_reasons: rejectionReasons,\r\n    custom_rejection_reason: customReason\r\n  });\r\n  return res.data;\r\n};\r\n\r\nexport default API;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAG,uBAAuB;AAExC,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH;AACX,CAAC,CAAC;;AAEF;AACAC,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMM,SAAS,GAAG,MAAOC,WAAW,IAAK;EAC9C,MAAMC,GAAG,GAAG,MAAMd,GAAG,CAACe,IAAI,CAAC,QAAQ,EAAEF,WAAW,EAAE;IAChDH,OAAO,EAAE;MAAE,cAAc,EAAE;IAAoC;EACjE,CAAC,CAAC;EAEF,MAAMH,KAAK,GAAGO,GAAG,CAACE,IAAI,CAACC,YAAY;EACnC,IAAIV,KAAK,EAAE;IACTC,YAAY,CAACU,OAAO,CAAC,OAAO,EAAEX,KAAK,CAAC;EACtC;EACA,OAAOO,GAAG,CAACE,IAAI;AACjB,CAAC;;AAED;AACA,OAAO,MAAMG,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,MAAML,GAAG,GAAG,MAAMd,GAAG,CAACoB,GAAG,CAAC,eAAe,CAAC;EAC1C,OAAON,GAAG,CAACE,IAAI;AACjB,CAAC;;AAED;AACA,OAAO,MAAMK,cAAc,GAAG,MAAOC,IAAI,IAAK;EAC5C,MAAMR,GAAG,GAAG,MAAMd,GAAG,CAACe,IAAI,CAAC,kBAAkB,EAAE;IAAEO;EAAK,CAAC,CAAC;EACxD,OAAOR,GAAG,CAACE,IAAI;AACjB,CAAC;;AAED;AACA,OAAO,MAAMO,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EAC7C,MAAMT,GAAG,GAAG,MAAMd,GAAG,CAACoB,GAAG,CAAC,oBAAoB,CAAC;EAC/C,OAAON,GAAG,CAACE,IAAI;AACjB,CAAC;;AAED;AACA,OAAO,MAAMQ,cAAc,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,EAAEC,gBAAgB,GAAG,EAAE,EAAEC,YAAY,GAAG,IAAI,KAAK;EACtG,MAAMd,GAAG,GAAG,MAAMd,GAAG,CAACe,IAAI,CAAC,kBAAkB,EAAE;IAC7Cc,SAAS,EAAEJ,QAAQ;IACnBC,QAAQ;IACRI,iBAAiB,EAAEH,gBAAgB;IACnCI,uBAAuB,EAAEH;EAC3B,CAAC,CAAC;EACF,OAAOd,GAAG,CAACE,IAAI;AACjB,CAAC;AAED,eAAehB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}